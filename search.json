[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "snippets",
    "section": "",
    "text": "bash\n\n\nsnippets\n\n\n\n\nFighting with bash\n\n\n\n\n\n\nDec 6, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\npython\n\n\njavascript\n\n\n\n\nComparison of python patterns and the javascript equivalent.\n\n\n\n\n\n\nNov 4, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\ndocker\n\n\n\n\nDocker commands\n\n\n\n\n\n\nAug 16, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\njupyter\n\n\npython\n\n\n\n\nUseful fastai code snippets\n\n\n\n\n\n\nMar 18, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\njupyter\n\n\npython\n\n\n\n\nPandas snippets\n\n\n\n\n\n\nMar 5, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\njupyter\n\n\npython\n\n\n\n\nAliases and .env setup\n\n\n\n\n\n\nMar 4, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\njupyter\n\n\npython\n\n\n\n\nSetup and snippets for a smooth jupyter notebook experience\n\n\n\n\n\n\nMar 2, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode snippets\n\n\njupyter\n\n\npython\n\n\nmachine learning\n\n\npytorch\n\n\n\n\nSnippets I found useful but have to look up frequently.\n\n\n\n\n\n\nMar 1, 2020\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/docker.html",
    "href": "posts/docker.html",
    "title": "Docker",
    "section": "",
    "text": "docker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\nRemove all images\ndocker system prune -a\nStop docker-compose and remove volumes\ndocker-compose down -v\nRun Docker container for data science workflows\ndocker run -d \\\n    -v \"${PWD}:/workspace\" \\\n    -p 8080:8080 \\\n    --name \"ml-workspace\" \\\n    --env AUTHENTICATE_VIA_JUPYTER=\"mytoken\" \\\n    --shm-size 2g \\\n    --restart always \\\n    dagshub/ml-workspace:latest\nRun wordpress, mysql & phpmyadmin with docker-compose\nversion: \"3.3\"\n\nservices:\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    volumes:\n      - ./db_volume:/var/lib/mysql\n    networks:\n      - wpsite\n\n  phpmyadmin:\n    depends_on:\n      - db\n    image: phpmyadmin/phpmyadmin\n    restart: always\n    ports:\n      - '8080:80'\n    environment:\n      PMA_HOST: db\n      MYSQL_ROOT_PASSWORD: password \n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    networks:\n      - wpsite\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    volumes:\n      - ./wp_volume:/var/www/html\n      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini\n    networks:\n      - wpsite\n\nnetworks:\n  wpsite:"
  },
  {
    "objectID": "posts/pandas.html",
    "href": "posts/pandas.html",
    "title": "Pandas",
    "section": "",
    "text": "pd.options.display.max_columns = None\npd.options.display.max_rows = None"
  },
  {
    "objectID": "posts/pandas.html#settingwithcopywarning",
    "href": "posts/pandas.html#settingwithcopywarning",
    "title": "Pandas",
    "section": "‘SettingWithCopyWarning’",
    "text": "‘SettingWithCopyWarning’\n\nimport pandas as pd\ndf = pd.DataFrame({'Number' : [100,200,300,400,500], 'Letter' : ['a','b','c', 'd', 'e']})\ndf\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n    \n  \n  \n    \n      0\n      100\n      a\n    \n    \n      1\n      200\n      b\n    \n    \n      2\n      300\n      c\n    \n    \n      3\n      400\n      d\n    \n    \n      4\n      500\n      e\n    \n  \n\n\n\n\n\ncriteria = df['Number']>300\ncriteria\n\n0    False\n1    False\n2    False\n3     True\n4     True\nName: Number, dtype: bool\n\n\n\nBoolean filters\n\ndf[criteria]\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n    \n  \n  \n    \n      3\n      400\n      d\n    \n    \n      4\n      500\n      e\n    \n  \n\n\n\n\n\n#Create a new DataFrame based on filtering criteria\ndf_2 = df[criteria]\n\n\n#Assign a new column and print output\ndf_2['new column'] = 'new value'\ndf_2\n\nSettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_2['new column'] = 'new value'\n\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n      new column\n    \n  \n  \n    \n      3\n      400\n      d\n      new value\n    \n    \n      4\n      500\n      e\n      new value\n    \n  \n\n\n\n\n\n\nUsing .loc[]\n\n#Create New DataFrame Based on Filtering Criteria\ndf_2 = df.loc[criteria, :]\n\n\n#Add a New Column to the DataFrame\ndf_2.loc[:, 'new column'] = 'new value'\ndf_2\n\n/Users/fabian/.venv/fastai/lib/python3.8/site-packages/pandas/core/indexing.py:844: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  self.obj[key] = _infer_fill_value(value)\n/Users/fabian/.venv/fastai/lib/python3.8/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  self.obj[item] = s\n\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n      new column\n    \n  \n  \n    \n      3\n      400\n      d\n      new value\n    \n    \n      4\n      500\n      e\n      new value\n    \n  \n\n\n\n\n\n\nSolution 1: using indices\n\ndf_2 = df[criteria]\n\n\ncriteria_row_indices = df[criteria].index\ncriteria_row_indices\n\nInt64Index([3, 4], dtype='int64')\n\n\n\nnew_df = df.loc[criteria_row_indices, :]\nnew_df\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n    \n  \n  \n    \n      3\n      400\n      d\n    \n    \n      4\n      500\n      e\n    \n  \n\n\n\n\n\nnew_df['New Column'] = 'New Value'\nnew_df\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n      New Column\n    \n  \n  \n    \n      3\n      400\n      d\n      New Value\n    \n    \n      4\n      500\n      e\n      New Value\n    \n  \n\n\n\n\n\n\nSolution 2: using .copy()\n\ndf[criteria]\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n    \n  \n  \n    \n      3\n      400\n      d\n    \n    \n      4\n      500\n      e\n    \n  \n\n\n\n\n\n#Create a new DataFrame based on filtering criteria\ndf_2 = df[criteria].copy()\n\n\n#Assign a new column and print output\ndf_2['new column'] = 'new value'\ndf_2\n\n\n\n\n\n  \n    \n      \n      Number\n      Letter\n      new column\n    \n  \n  \n    \n      3\n      400\n      d\n      new value\n    \n    \n      4\n      500\n      e\n      new value"
  },
  {
    "objectID": "posts/pandas.html#conditional-assignments",
    "href": "posts/pandas.html#conditional-assignments",
    "title": "Pandas",
    "section": "Conditional assignments",
    "text": "Conditional assignments\n\nusing .map\n\ndf['Number'].map({100:1, 200:2})\n\n0    1.0\n1    2.0\n2    NaN\n3    NaN\n4    NaN\nName: Number, dtype: float64\n\n\n\n\nusing .apply\nSimiliar to .map but with a function.\n\ndef criteria(num):\n    return 0 if num>300 else 1\n\n\ndf['Number'].apply(criteria)\n\n0    1\n1    1\n2    1\n3    0\n4    0\nName: Number, dtype: int64"
  },
  {
    "objectID": "posts/pandas.html#oversampling",
    "href": "posts/pandas.html#oversampling",
    "title": "Pandas",
    "section": "Oversampling",
    "text": "Oversampling\nOversampling is a very useful technique that can be used across many contexts to a great effect https://arxiv.org/abs/1710.05381.\n\nfrom fastai2.tabular.all import *\ntitanic = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv')\ntitanic.dropna(subset=['embark_town'], inplace=True)\n\n\ntitanic.head()\n\n\n\n\n\n  \n    \n      \n      survived\n      pclass\n      sex\n      age\n      sibsp\n      parch\n      fare\n      embarked\n      class\n      who\n      adult_male\n      deck\n      embark_town\n      alive\n      alone\n    \n  \n  \n    \n      0\n      0\n      3\n      male\n      22.0\n      1\n      0\n      7.2500\n      S\n      Third\n      man\n      True\n      NaN\n      Southampton\n      no\n      False\n    \n    \n      1\n      1\n      1\n      female\n      38.0\n      1\n      0\n      71.2833\n      C\n      First\n      woman\n      False\n      C\n      Cherbourg\n      yes\n      False\n    \n    \n      2\n      1\n      3\n      female\n      26.0\n      0\n      0\n      7.9250\n      S\n      Third\n      woman\n      False\n      NaN\n      Southampton\n      yes\n      True\n    \n    \n      3\n      1\n      1\n      female\n      35.0\n      1\n      0\n      53.1000\n      S\n      First\n      woman\n      False\n      C\n      Southampton\n      yes\n      False\n    \n    \n      4\n      0\n      3\n      male\n      35.0\n      0\n      0\n      8.0500\n      S\n      Third\n      man\n      True\n      NaN\n      Southampton\n      no\n      True\n    \n  \n\n\n\n\n\ntitanic.embark_town.value_counts().plot.bar();\n\n\n\n\n\ndf = pd.DataFrame(1 / titanic.embark_town.value_counts())\n\n\nweights = titanic.embark_town.apply(lambda x: df.to_dict()['embark_town'][x])\n\n\nweighted_sample = titanic.sample(n=900, weights=weights, replace=True)\n\n\nweighted_sample.embark_town.value_counts().plot.bar();\n\n\n\n\n\nweighted_sample.duplicated().value_counts()\n\nTrue     485\nFalse    415\ndtype: int64"
  },
  {
    "objectID": "posts/pandas.html#categorify",
    "href": "posts/pandas.html#categorify",
    "title": "Pandas",
    "section": "Categorify",
    "text": "Categorify\n\ncat_vars = ['survived', 'pclass', 'sex', 'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town', 'alive', 'alone']\ncont_vars = ['age', 'sibsp', 'parch', 'fare']\n\n\ntitanic.dtypes\n\nsurvived         int64\npclass           int64\nsex             object\nage            float64\nsibsp            int64\nparch            int64\nfare           float64\nembarked        object\nclass           object\nwho             object\nadult_male        bool\ndeck            object\nembark_town     object\nalive           object\nalone             bool\ndtype: object\n\n\n\ncriteria = titanic.columns.isin(cat_vars)\ntitanic.loc[:,criteria] = titanic.loc[:,criteria].astype('category')\n\n\ntitanic.dtypes\n\nsurvived       category\npclass         category\nsex            category\nage             float64\nsibsp             int64\nparch             int64\nfare            float64\nembarked       category\nclass          category\nwho            category\nadult_male     category\ndeck           category\nembark_town    category\nalive          category\nalone          category\ndtype: object"
  },
  {
    "objectID": "posts/pandas.html#pandas-table-styling",
    "href": "posts/pandas.html#pandas-table-styling",
    "title": "Pandas",
    "section": "Pandas table styling",
    "text": "Pandas table styling\n\n#hide\nfrom fastai2.vision.all import *\npath = untar_data(URLs.MNIST_SAMPLE)\nthrees = (path/'train'/'3').ls().sorted()\nim3_path = threes[1]\nim3 = Image.open(im3_path)\n\n\nim3_t = tensor(im3)\ndf = pd.DataFrame(im3_t[4:15,4:22])\ndf.style.set_properties(**{'font-size':'6pt'}).background_gradient('Greys')\n\n\n                    0        1        2        3        4        5        6        7        8        9        10        11        12        13        14        15        16        17    \n                \n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n            \n            \n                        1\n                        0\n                        0\n                        0\n                        0\n                        0\n                        29\n                        150\n                        195\n                        254\n                        255\n                        254\n                        176\n                        193\n                        150\n                        96\n                        0\n                        0\n                        0\n            \n            \n                        2\n                        0\n                        0\n                        0\n                        48\n                        166\n                        224\n                        253\n                        253\n                        234\n                        196\n                        253\n                        253\n                        253\n                        253\n                        233\n                        0\n                        0\n                        0\n            \n            \n                        3\n                        0\n                        93\n                        244\n                        249\n                        253\n                        187\n                        46\n                        10\n                        8\n                        4\n                        10\n                        194\n                        253\n                        253\n                        233\n                        0\n                        0\n                        0\n            \n            \n                        4\n                        0\n                        107\n                        253\n                        253\n                        230\n                        48\n                        0\n                        0\n                        0\n                        0\n                        0\n                        192\n                        253\n                        253\n                        156\n                        0\n                        0\n                        0\n            \n            \n                        5\n                        0\n                        3\n                        20\n                        20\n                        15\n                        0\n                        0\n                        0\n                        0\n                        0\n                        43\n                        224\n                        253\n                        245\n                        74\n                        0\n                        0\n                        0\n            \n            \n                        6\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        249\n                        253\n                        245\n                        126\n                        0\n                        0\n                        0\n                        0\n            \n            \n                        7\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        14\n                        101\n                        223\n                        253\n                        248\n                        124\n                        0\n                        0\n                        0\n                        0\n                        0\n            \n            \n                        8\n                        0\n                        0\n                        0\n                        0\n                        0\n                        11\n                        166\n                        239\n                        253\n                        253\n                        253\n                        187\n                        30\n                        0\n                        0\n                        0\n                        0\n                        0\n            \n            \n                        9\n                        0\n                        0\n                        0\n                        0\n                        0\n                        16\n                        248\n                        250\n                        253\n                        253\n                        253\n                        253\n                        232\n                        213\n                        111\n                        2\n                        0\n                        0\n            \n            \n                        10\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        0\n                        43\n                        98\n                        98\n                        208\n                        253\n                        253\n                        253\n                        253\n                        187\n                        22\n                        0"
  },
  {
    "objectID": "posts/bash.html",
    "href": "posts/bash.html",
    "title": "bash",
    "section": "",
    "text": "By default, bash will continue after errors.\nset -e stops the script on errors.\nBy default, unset variables don’t error.\nset -u stops the script on unset variables.\nBy default, a command failing doesn’t fail the whole pipeline.\nset -o pipefail prevents this."
  },
  {
    "objectID": "posts/bash.html#section",
    "href": "posts/bash.html#section",
    "title": "bash",
    "section": "2>&1",
    "text": "2>&1\nFile descriptor 1 is the standard output (stdout).\nFile descriptor 2 is the standard error (stderr).\nHere is one way to remember this construct (although it is not entirely accurate): at first, 2>1 may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as “redirect stderr to a file named 1”. & indicates that what follows and precedes is a file descriptor and not a filename. So the construct becomes: 2>&1.\nConsider >& as redirect merger operator."
  },
  {
    "objectID": "posts/bash.html#section-1",
    "href": "posts/bash.html#section-1",
    "title": "bash",
    "section": "!!",
    "text": "!!\nHistory substitution: When you use history substitution, the shell first displays the command that it’s about to execute with all the substitutions shown, and then executes it."
  },
  {
    "objectID": "posts/bash.html#section-2",
    "href": "posts/bash.html#section-2",
    "title": "bash",
    "section": "[[",
    "text": "[[\nNote that [[ is actually a command/program that returns either 0 (true) or 1 (false)."
  },
  {
    "objectID": "posts/bash.html#s-file",
    "href": "posts/bash.html#s-file",
    "title": "bash",
    "section": "[[ -s FILE ]]",
    "text": "[[ -s FILE ]]\nSize is > 0 bytes.\nThe -s test returns true if file.txt exists and has a size greater than zero"
  },
  {
    "objectID": "posts/bash.html#true",
    "href": "posts/bash.html#true",
    "title": "bash",
    "section": "|| true",
    "text": "|| true\nIn cases where a command in the script is allowed to fail, adding || true ensures that the resulting compound command always exits with status zero, so the script doesn’t abort. For example, removing a directory shouldn’t be a fatal error (preventing a package from being removed); so we’d use\nrmdir ... || true\nsince rmdir doesn’t have an option to tell it to ignore errors."
  },
  {
    "objectID": "posts/bash.html#z-string",
    "href": "posts/bash.html#z-string",
    "title": "bash",
    "section": "[[ -z STRING ]]",
    "text": "[[ -z STRING ]]\nEmpty string"
  },
  {
    "objectID": "posts/bash.html#n-string",
    "href": "posts/bash.html#n-string",
    "title": "bash",
    "section": "[[ -n STRING ]]",
    "text": "[[ -n STRING ]]\nNot empty string"
  },
  {
    "objectID": "posts/bash.html#awk",
    "href": "posts/bash.html#awk",
    "title": "bash",
    "section": "awk",
    "text": "awk\nFor manipulating columns of data.\nBasic awk structure: BEGIN {...} CONDITION {action} CONDITION {action} END {...}\nExamples:\n\nprint thrid and fourth column of every row\n\nawk '{print $3 \"\\t\" $4}' test.txt\n\nprint all lines that match a pattern (print is default so {print $0} could be omitted)\n\nawk '/a/ {print $0}' test.txt"
  },
  {
    "objectID": "posts/bash.html#grep",
    "href": "posts/bash.html#grep",
    "title": "bash",
    "section": "grep",
    "text": "grep\n-i case insensitive\n-E use if you want regular expressions like “.+” to work. Otherwise you need to use “.+”.\n-v invert match: find all lines that don’t match.\n-o only print the matching part of the line (not the whole line)"
  },
  {
    "objectID": "posts/bash.html#lsof",
    "href": "posts/bash.html#lsof",
    "title": "bash",
    "section": "lsof",
    "text": "lsof\nStands for list open files For each open file:\n\npid\nfile type (regular? directory? FIFO? socket?)\nfile descriptor (FD column)\nuser\nfile name/socket address"
  },
  {
    "objectID": "posts/bash.html#sed",
    "href": "posts/bash.html#sed",
    "title": "bash",
    "section": "sed",
    "text": "sed\nsed is most often used for replacing text in a file.\nsed s/cat/dog/g file.txt\nsed 5d - delete 5th line\nsed /cat/d - delete lines matching /cat/\nsed -n 5,30p - print lines 5-30\nsed s+cat/+dog/+ - use + as regex delimiter (way easier than escaping /s like s/cat\\//dog\\//)\nset '/cat/a dog' - append ‘dog’ after lines containing ‘cat’"
  },
  {
    "objectID": "posts/bash.html#find",
    "href": "posts/bash.html#find",
    "title": "bash",
    "section": "find",
    "text": "find\nfind searches a directory for files.\nhttps://wizardzines.com/comics/find/\nfind /tmp -type d -print"
  },
  {
    "objectID": "posts/bash.html#substitution",
    "href": "posts/bash.html#substitution",
    "title": "bash",
    "section": "Substitution",
    "text": "Substitution\nname=\"John\"\necho ${name/J/j}\n=> “john” (substitution)"
  },
  {
    "objectID": "posts/jupyter-notebook.html",
    "href": "posts/jupyter-notebook.html",
    "title": "Jupyter Notebook",
    "section": "",
    "text": "Edit the crontab for your user.\ncrontab -e\nAdd the following line.\n@reboot source ~/.venv/venv/bin/activate; ~/.venv/venv/bin/jupyter-notebook"
  },
  {
    "objectID": "posts/jupyter-notebook.html#magic-commands",
    "href": "posts/jupyter-notebook.html#magic-commands",
    "title": "Jupyter Notebook",
    "section": "Magic Commands",
    "text": "Magic Commands\nAutoreload imports when file changes were made.\n\n%load_ext autoreload\n%autoreload 2\n\nShow matplotlib plots inside the notebook.\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nMeasure excecution time of a cell.\n\n%%time\n\npip install from jupyter notebook.\n\nimport sys\n!{sys.executable} -m pip install numpy"
  },
  {
    "objectID": "posts/fastai.html",
    "href": "posts/fastai.html",
    "title": "fastai snippets",
    "section": "",
    "text": "Currently using fastai2.\nInstallation via pip install fastai2."
  },
  {
    "objectID": "posts/fastai.html#oversampling",
    "href": "posts/fastai.html#oversampling",
    "title": "fastai snippets",
    "section": "Oversampling",
    "text": "Oversampling\n\nfrom fastai2.tabular.all import *\ntitanic = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv')\n\n\ncat_vars = ['survived', 'pclass', 'sex', 'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town', 'alone']\ncont_vars = ['age', 'sibsp', 'parch', 'fare']\ndep_var = 'alive'\nprocs = [Categorify, FillMissing, Normalize]\nblock_y = CategoryBlock()\nsplits = RandomSplitter()(range_of(titanic))\n\n\nto = TabularPandas(titanic, procs=procs, cat_names=cat_vars, cont_names=cont_vars,\n                   y_names=dep_var, block_y=block_y, splits=splits)\n\n\nto.items\n\n\n\n\n\n  \n    \n      \n      survived\n      pclass\n      sex\n      age\n      sibsp\n      parch\n      fare\n      embarked\n      class\n      who\n      adult_male\n      deck\n      embark_town\n      alive\n      alone\n      age_na\n      sibsp_na\n      parch_na\n      fare_na\n    \n  \n  \n    \n      143\n      1\n      3\n      2\n      -0.799442\n      -0.464437\n      -0.467832\n      -0.509204\n      2\n      3\n      2\n      2\n      0\n      2\n      0\n      2\n      1\n      1\n      1\n      1\n    \n    \n      376\n      2\n      3\n      1\n      -0.568123\n      -0.464437\n      -0.467832\n      -0.498856\n      3\n      3\n      3\n      1\n      0\n      3\n      1\n      2\n      1\n      1\n      1\n      1\n    \n    \n      853\n      2\n      1\n      1\n      -1.030761\n      -0.464437\n      0.815107\n      0.166542\n      3\n      1\n      3\n      1\n      4\n      3\n      1\n      1\n      1\n      1\n      1\n      1\n    \n    \n      333\n      1\n      3\n      2\n      -1.030761\n      1.242489\n      -0.467832\n      -0.276367\n      3\n      3\n      2\n      2\n      0\n      3\n      0\n      1\n      1\n      1\n      1\n      1\n    \n    \n      791\n      1\n      2\n      2\n      -1.030761\n      -0.464437\n      -0.467832\n      -0.110793\n      3\n      2\n      2\n      2\n      0\n      3\n      0\n      2\n      1\n      1\n      1\n      1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      206\n      1\n      3\n      2\n      0.202940\n      0.389026\n      -0.467832\n      -0.320865\n      3\n      3\n      2\n      2\n      0\n      3\n      0\n      1\n      1\n      1\n      1\n      1\n    \n    \n      654\n      1\n      3\n      1\n      -0.876548\n      -0.464437\n      -0.467832\n      -0.509204\n      2\n      3\n      3\n      1\n      0\n      2\n      0\n      2\n      1\n      1\n      1\n      1\n    \n    \n      802\n      2\n      1\n      2\n      -1.416293\n      0.389026\n      2.098045\n      1.834694\n      3\n      1\n      1\n      1\n      2\n      3\n      1\n      1\n      1\n      1\n      1\n      1\n    \n    \n      257\n      2\n      1\n      1\n      0.048727\n      -0.464437\n      -0.467832\n      1.141355\n      3\n      1\n      3\n      1\n      2\n      3\n      1\n      2\n      1\n      1\n      1\n      1\n    \n    \n      41\n      1\n      2\n      1\n      -0.182592\n      0.389026\n      -0.467832\n      -0.214277\n      3\n      2\n      3\n      1\n      0\n      3\n      0\n      1\n      1\n      1\n      1\n      1\n    \n  \n\n891 rows × 19 columns\n\n\n\n\nto.items.alive.value_counts().plot.bar();\n\n\n\n\n\ndls = to.dataloaders()\n\n\nlearn = tabular_learner(dls, [200,100], metrics=accuracy)\n\nThe get_idxs method of DataLoaders samples the idxs to be used in an epoch of training:\n\nlearn.dls.get_idxs()[:10]\n\n[412, 122, 391, 38, 310, 400, 316, 320, 57, 500]\n\n\n\nlen(learn.dls.get_idxs())\n\n700\n\n\n\ndf = pd.DataFrame(1 / learn.dls.items.alive.value_counts())\n\n\nweights = learn.dls.items.alive.apply(lambda x: df.to_dict()['alive'][x])\n\n\nlearn.dls.train.items.sample(n=700, weights=weights, replace=True).alive.value_counts()\n\n0    352\n1    348\nName: alive, dtype: int64\n\n\n\ndef sample_epoch(self):\n    df = pd.DataFrame(1 / self.items.alive.value_counts())\n    weights = self.items.alive.apply(lambda x: df.to_dict()['alive'][x])\n    self.n = 700 # going for bigger epochs as this will require quite a bit of training\n    oversampled_idxs = self.items.sample(n=self.n, weights=weights, replace=True).index\n    return [np.where(self.items.index == i)[0][0] for i in oversampled_idxs]\n\n\nlearn.dls.train.get_idxs = types.MethodType(sample_epoch, learn.dls.train)\n\n\nidxs = learn.dls.train.get_idxs()\nlearn.dls.train.items.iloc[idxs].alive.value_counts()\n\n1    360\n0    340\nName: alive, dtype: int64\n\n\n\nlearn.fit(10, 1e-3)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.401528\n      0.673750\n      0.657303\n      00:00\n    \n    \n      1\n      0.231258\n      0.608156\n      0.792135\n      00:00\n    \n    \n      2\n      0.144609\n      0.453062\n      0.955056\n      00:00\n    \n    \n      3\n      0.098268\n      0.222973\n      1.000000\n      00:00\n    \n    \n      4\n      0.070314\n      0.066305\n      1.000000\n      00:00\n    \n    \n      5\n      0.052205\n      0.014175\n      1.000000\n      00:00\n    \n    \n      6\n      0.039717\n      0.002960\n      1.000000\n      00:00\n    \n    \n      7\n      0.030711\n      0.000851\n      1.000000\n      00:00\n    \n    \n      8\n      0.024077\n      0.000408\n      1.000000\n      00:00\n    \n    \n      9\n      0.019053\n      0.000268\n      1.000000\n      00:00\n    \n  \n\n\n\n\nlearn = tabular_learner(dls, [200,100], metrics=accuracy)\n\n\nlearn.fit(10, 1e-3)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.328865\n      0.669253\n      0.775281\n      00:00\n    \n    \n      1\n      0.180982\n      0.614954\n      0.943820\n      00:00\n    \n    \n      2\n      0.110680\n      0.484824\n      0.977528\n      00:00\n    \n    \n      3\n      0.074929\n      0.271870\n      1.000000\n      00:00\n    \n    \n      4\n      0.053904\n      0.095419\n      1.000000\n      00:00\n    \n    \n      5\n      0.040015\n      0.020298\n      1.000000\n      00:00\n    \n    \n      6\n      0.030432\n      0.003644\n      1.000000\n      00:00\n    \n    \n      7\n      0.023582\n      0.000864\n      1.000000\n      00:00\n    \n    \n      8\n      0.018468\n      0.000273\n      1.000000\n      00:00\n    \n    \n      9\n      0.014615\n      0.000178\n      1.000000\n      00:00"
  },
  {
    "objectID": "posts/unix.html",
    "href": "posts/unix.html",
    "title": "Unix setup",
    "section": "",
    "text": "Upgrade pip.\npython3 -m pip install --upgrade pip\nCreate a base folder to store the virtual environments in.\nmkdir ~/.venv\nCreate a new virtual environment.\npython3 -m venv ~/.venv/venv\nActivate the virtual environment.\nsource ~/.venv/venv/bin/activate\nInstall ipykernel.\npython3 -m pip install ipykernel\nAdd the new kernel.\nipython kernel install --name=venv #--user\n\n\npython3 -m pip install --upgrade pip\nmkdir ~/.venv\npython3 -m venv ~/.venv/venv\nsource ~/.venv/venv/bin/activate\npython3 -m pip install ipykernel\nipython kernel install --name=venv #--user"
  },
  {
    "objectID": "posts/unix.html#alias-setup",
    "href": "posts/unix.html#alias-setup",
    "title": "Unix setup",
    "section": "alias setup",
    "text": "alias setup\nAdd the following aliases to your .bashrc or .zshrc file:\nActivate your virtual environment and start jupyter notebook.\nalias jn='source ~/.venv/venv/bin/activate && jupyter notebook'\nActivate your virtual environment.\nalias letsgo='source ~/.venv/venv/bin/activate'\nActivate any of your virtual environments.\nfunction act { source ~/.virtualenvs/\"$1\"/bin/activate }\n> act venv\nThe standard zsh shell that comes with macOS doesn’t print the current active virtual environment. Add the following to ~/.zshrc to enable showing the virtual environment.\nexport VIRTUAL_ENV_DISABLE_PROMPT=\nActivate the virtual environment by default.\nif [[ \"$VIRTUAL_ENV\" != \"/Users/fabian/.venv/venv\" ]]; then source ~/.venv/venv/bin/activate; fi\nSet default directory to ~/Code.\nif [[ $PWD == $HOME ]]; then cd /Users/fabian/Code; fi\n\nTL;DR\nalias jn='source ~/.venv/venv/bin/activate && jupyter notebook'\nalias letsgo='source ~/.venv/venv/bin/activate'\nalias typora=\"open -a typora\"\nalias cm=\"git add . && git commit -am \"Update\" && git push\"\n\nfunction act { source ~/.venv/\"$1\"/bin/activate }\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=\n\nif [[ \"$VIRTUAL_ENV\" != \"/Users/fabian/.venv/venv\" ]]; then source ~/.venv/venv/bin/activate; fi\n\nif [[ $PWD == $HOME ]]; then cd /Users/fabian/Code; fi"
  },
  {
    "objectID": "posts/machine-learning-pytorch.html",
    "href": "posts/machine-learning-pytorch.html",
    "title": "Machine Learning/PyTorch",
    "section": "",
    "text": "Monitor GPU usage.\n\nwatch -n0.1 nvidia-smi"
  },
  {
    "objectID": "posts/machine-learning-pytorch.html#pytorch",
    "href": "posts/machine-learning-pytorch.html#pytorch",
    "title": "Machine Learning/PyTorch",
    "section": "PyTorch",
    "text": "PyTorch\nCheck if PyTorch is using a GPU.\n\nimport torch\n\n\ntorch.cuda.current_device()\n\n\ntorch.cuda.device(0)\n\n\ntorch.cuda.device_count()\n\n\ntorch.cuda.get_device_name(0)\n\nCheck if model is on CUDA.\n\nnext(model.parameters()).is_cuda # returns a boolean\n\nClear cache on a specific pytorch CUDA device.\n\nwith torch.cuda.device('cuda:1'):\n    torch.cuda.empty_cache()\n\nCheck the number of parameters of a model.\n\ndef get_n_params(model):\n    pp=0\n    for p in list(model.parameters()):\n        nn=1\n        for s in list(p.size()):\n            nn = nn*s\n        pp += nn\n    return pp\n\n\ndef count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)"
  },
  {
    "objectID": "posts/pythonic-javascript.html",
    "href": "posts/pythonic-javascript.html",
    "title": "Pythonic javascript",
    "section": "",
    "text": "Content from:"
  },
  {
    "objectID": "posts/pythonic-javascript.html#exception-handling",
    "href": "posts/pythonic-javascript.html#exception-handling",
    "title": "Pythonic javascript",
    "section": "Exception handling",
    "text": "Exception handling\n\n# Python\ntry:\n    thing()\nexcept Exception:\n    print(\"oh no!\")\n\nraise ValueError(\"not a good value\")\n\n// Javascript\ntry {\n  thing();\n} catch (error) {\n  console.error(\"oh no!\");\n}\n\nthrow \"not a good value\";"
  },
  {
    "objectID": "posts/pythonic-javascript.html#iterators",
    "href": "posts/pythonic-javascript.html#iterators",
    "title": "Pythonic javascript",
    "section": "Iterators",
    "text": "Iterators\n\n# Python\narr = [1, 2, 3]\nobj = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}\n\nfor val in arr:\n    print(val)\n\nfor key in obj:\n    print(key)\n\n// Javascript\nvar arr = [1, 2, 3];\nvar obj = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nfor (let val of arr) {\n  console.log(val);\n}\n\n// or...\narr.forEach((value, index) => {\n  console.log(value);\n});\n\nfor (let key in obj) {\n  console.log(key);\n}"
  },
  {
    "objectID": "posts/pythonic-javascript.html#generators",
    "href": "posts/pythonic-javascript.html#generators",
    "title": "Pythonic javascript",
    "section": "Generators",
    "text": "Generators\n\n# Python\ndef gen(x):\n    while True:\n        yield x\n        x = x + 1\n\n// Javascript\nfunction* gen(x) {\n  while (true) {\n    yield x;\n    x++;\n  }\n}"
  },
  {
    "objectID": "posts/pythonic-javascript.html#classes",
    "href": "posts/pythonic-javascript.html#classes",
    "title": "Pythonic javascript",
    "section": "Classes",
    "text": "Classes\n\n# Python\nclass Thing:\n    def __init__(self, a):\n        self.a = a\n\n    def add_one(self):\n        return self.a + 1\n\nclass OtherThing(Thing):\n    def __init__(self, a, b):\n        super(OtherThing, self).__init__(a)\n        self.b = b\n\n    def add_things(self):\n        return self.a + self.b\n\n// Javascript\nclass Thing {\n  constructor(a) {\n    this.a = a;\n  }\n\n  addOne() {\n    return this.a + 1;\n  }\n}\n\nclass OtherThing extends Thing {\n  constructor(a, b) {\n    super(a);\n    this.b = b;\n  }\n\n  addThings() {\n    return this.a + this.b;\n  }\n}"
  },
  {
    "objectID": "posts/pythonic-javascript.html#functional-programming",
    "href": "posts/pythonic-javascript.html#functional-programming",
    "title": "Pythonic javascript",
    "section": "Functional programming",
    "text": "Functional programming\n\nLambdas\n\n# Python\nexpression = lambda a, b: a + b\n\n// Javascript\n// Arrow functions are more powerful than Python lambdas, but not in\n// this example!\nlet expression = (a, b) => a + b;\n\n// or...\nlet sameThing = function (a, b) {\n  return a + b;\n}"
  },
  {
    "objectID": "posts/pythonic-javascript.html#general-javascript",
    "href": "posts/pythonic-javascript.html#general-javascript",
    "title": "Pythonic javascript",
    "section": "General Javascript",
    "text": "General Javascript\n\nObject Literal\nA JavaScript object literal is a comma-separated list of name-value pairs wrapped in curly braces. Object literals encapsulate data, enclosing it in a tidy package. This minimizes the use of global variables which can cause problems when combining code.\nObject literals are defined using the following syntax rules:\n\nA colon separates property name from value.\nA comma separates each name-value pair from the next.\nThere should be no comma after the last name-value pair.\n\nvar myObject = {\n    sProp: 'some string value',\n    numProp: 2,\n    bProp: false\n};\n\n\nFunctions\nUnlike constants, variables in JavaScript don’t need an initial value. You can provide one later:\nlet name;\nname = 'John Doe';\nWhen you leave off the initial value, you create what’s called a variable declaration rather than a variable definition. Such variables automatically receive a special value of undefined, which is one of the primitive types in JavaScript. This is different in Python, where you always define variables except for variable annotations. But even then, these variables aren’t technically declared.\n\n\nArrow functions\nNotice that there’s no function keyword anymore, and the return statement is implicit. The arrow symbol (=>) separates the function’s arguments from its body.\nWhen you want to return an object literal from an arrow function, you need to wrap it in parentheses to avoid ambiguity with a block of code:\nlet add = (a, b) => ({\n  result: a + b\n});\nOtherwise, the function body would be confused for a block of code without any return statements, and the colon would create a labeled statement rather than a key-value pair.\n// JavaScript function\n function funcName(param) {\n  return param + 10;\n}\n\n// JavaScript arrow function\nconst funcName = (param) => param + 2\n\n\nAnonymous Closures\nThis is the fundamental construct that makes it all possible, and really is the single best feature of JavaScript. We’ll simply create an anonymous function, and execute it immediately. All of the code that runs inside the function lives in a closure, which provides privacy and state throughout the lifetime of our application.\n(function () {\n  // ... all vars and functions are in this scope only\n  // still maintains access to all globals\n}());\nNotice the () around the anonymous function. This is required by the language, since statements that begin with the token function are always considered to be function declarations. Including () creates a function expression instead."
  }
]